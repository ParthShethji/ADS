#include <iostream>
#include <vector>
#include <stack>

using namespace std;

// DFS function to traverse the graph recursively
void DFS(vector<vector<int>> graph, int start, vector<bool>& visited) {
    // Mark the current node as visited and print it
    visited[start] = true;
    cout << start << " ";

    // Recur for all the vertices adjacent to this vertex
    for (int i = 0; i < graph[start].size(); ++i) {
        int adj = graph[start][i];
        if (!visited[adj]) {
            DFS(graph, adj, visited);
        }
    }
}

// DFS function to traverse the graph iteratively
void DFS_iterative(vector<vector<int>> graph, int start) {
    // Mark all the vertices as not visited
    vector<bool> visited(graph.size(), false);

    // Create a stack for DFS
    stack<int> s;

    // Push the current start vertex to the stack
    s.push(start);

    while (!s.empty()) {
        // Pop a vertex from stack and print it
        int curr = s.top();
        s.pop();

        // If the current vertex has not been visited yet
        if (!visited[curr]) {
            // Mark it as visited and print it
            visited[curr] = true;
            cout << curr << " ";

            // Get all adjacent vertices of the popped vertex curr
            for (int i = 0; i < graph[curr].size(); ++i) {
                int adj = graph[curr][i];
                // If an adjacent vertex has not been visited, push it to the stack
                if (!visited[adj]) {
                    s.push(adj);
                }
            }
        }
    }
}

int main() {
    // Create a sample graph
    vector<vector<int>> graph = {{1, 2}, {0, 2, 3}, {0, 1, 3, 4}, {1, 2, 4}, {2, 3}};

    cout << "DFS Traversal of the graph starting from vertex 0 (recursive): ";
    vector<bool> visited(graph.size(), false);
    DFS(graph, 0, visited);

    cout << endl << "DFS Traversal of the graph starting from vertex 0 (iterative): ";
    DFS_iterative(graph, 0);

    return 0;
}

