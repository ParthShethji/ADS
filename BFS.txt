#include <iostream>
#include <vector>
#include <queue>

using namespace std;

// BFS function to traverse the graph
void BFS(vector<vector<int>> graph, int start) {
    // Mark all the vertices as not visited
    vector<bool> visited(graph.size(), false);

    // Create a queue for BFS
    queue<int> q;

    // Mark the current node as visited and enqueue it
    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        // Dequeue a vertex from queue and print it
        int curr = q.front();
        cout << curr << " ";
        q.pop();

        // Get all adjacent vertices of the dequeued vertex curr
        for (int i = 0; i < graph[curr].size(); ++i) {
            int adj = graph[curr][i];
            // If an adjacent vertex has not been visited, mark it visited and enqueue it
            if (!visited[adj]) {
                visited[adj] = true;
                q.push(adj);
            }
        }
    }
}

int main() {
    // Create a sample graph
    vector<vector<int>> graph = {{1, 2}, {0, 2, 3}, {0, 1, 3, 4}, {1, 2, 4}, {2, 3}};

    cout << "BFS Traversal of the graph starting from vertex 0: ";
    BFS(graph, 0);

    return 0;
}

